{"name":"Technical Benefits","culture":"en-US","description":"There are many technical advantages to using Aurelia. In this article, you will find a list of points we think are interesting. Taken together, there is no other SPA framework today that can match Aurelia.","engines":{"aurelia-doc":"^1.0.0"},"author":{"name":"Rob Eisenberg","url":"http://robeisenberg.com"},"contributors":[],"translators":[],"keywords":["Benefits","Capabilities"],"content":"\n## [Modern JavaScript](aurelia-doc://section/1/version/1.0.0)\n\n* The only framework fully written in standards-based ES 2015 and ES 2016.\n* Forward compatible with JavaScript technology that is 2-3 years in the future.\n* Full support for TypeScript.\n\n## [Modern DOM](aurelia-doc://section/2/version/1.0.0)\n\n* Consistently leverages the most modern DOM APIs.\n* Bare “to the metal” usage of the DOM; no DOM wrappers in order to ensure maximum performance and memory efficiency.\n* Automatically polyfills the DOM where appropriate, in order to support older browsers (IE9).\n\n## [Modern Tooling](aurelia-doc://section/3/version/1.0.0)\n\n* Designed to work with modern ES 2015-oriented package managers like JSPM.\n* Intended to be used with modern transpilers such as Babel and TypeScript.\n* Supports modern build tooling such as Gulp, out-of-the-box.\n* Works well with powerful testing tools like Karma and Protractor.\n\n## [Code Quality](aurelia-doc://section/4/version/1.0.0)\n\n* Source code is covered by an extensive suite of unit tests.\n* All source is fully linted for style and feature-usage consistency throughout.\n* Code correctness is independently verified by two transpilers: Babel and TypeScript.\n* TypeScript d.ts files and full API documentation are provided for all libraries.\n\n## [Web Component Standards](aurelia-doc://section/5/version/1.0.0)\n\n* Leverages standards-compliant Web Components specs such as HTMLTemplateElement and ShadowDOM.\n* Aurelia components can be exported as standards-compliant Web Components for use outside of the framework, in other apps and web pages (soon).\n* Fully compatible with 3rd-party Web Components, even those originating from other frameworks such as Polymer.\n* Shields developers from broken or poorly designed aspects of Web Components.\n* Provides a Web Component-based programming model even on browsers that will never support Web Components (IE).\n\n## [Modularity](aurelia-doc://section/6/version/1.0.0)\n\n* Highly modular development, suitable for large-scale apps.\n* Native support for feature-based development facilitating parallel development of multiple teams on the same app.\n* Strong component model for high re-use of UI components across apps.\n* Export components as spec-compliant Web Components for use in non-Aurelia apps (soon)\n\n## [Platform Support](aurelia-doc://section/7/version/1.0.0)\n\n* Designed for modern web browsers.\n* Adds polyfills to support older browsers, such as IE9.\n* A core platform abstraction allows execution of Aurelia in different types of JavaScript environments: browser, NodeJS, Windows Store, etc.\n* Designed for mobile application development in combination with PhoneGap/Cordova/Crosswalk.\n* Designed for desktop application development in combination with Electron or NWJS.\n\n## [Capabilities](aurelia-doc://section/8/version/1.0.0)\n\n* Write apps in ES2015/2016/TypeScript.\n* One simple way of creating components that work in a variety of contexts:\n    * Custom Elements\n    * Dynamically Composed UI (data-driven component composition)\n    * Routing/Navigation\n    * Modal Dialogs\n    * Web Components\n    * Progressive Enhancement\n    * Custom scenarios enabled through our Composition Engine\n* Fully-extensible View Compiler, View Engine and View Resource Pipeline.\n* Fully-extensible and adaptive data-binding engine.\n* Powerful and flexible hierarchical dependency injection.\n* Eager/Lazy/Hybrid loading of all application resources.\n* Powerful application router with support for encapsulated child routers for multi-team, large-scale development.\n* Optionally create standards-compliant Web Components or leverage “shielding” from the flaws in the WC specs.\n* Interoperate with any standards-compliant Web Component.\n* Loosely coupled cross-component communication via an EventAggregator (Pub/Sub)\n* Fully customizable application startup and plugin model.\n* Enables authoring of testable, maintainable and extensible code.\n* Leverage conventions to write less code and get more done.\n* Little to no framework intrusion, so developers can focus on their app, not the framework.\n* Application and package bundling compatible with any build system.\n"}